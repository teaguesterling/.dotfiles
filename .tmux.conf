# ~/.tmux.conf - Terminator-style keybindings for tmux
# Place this file in your home directory as .tmux.conf

# ============================================
# CORE SETTINGS
# ============================================

# Enable alternate screen buffer - allows fullscreen programs (vim, less) to restore terminal content on exit
set -g alternate-screen on

# Change prefix key from default Ctrl-b to Ctrl-a (screen-style, easier to reach)
unbind C-b                      # Remove default prefix binding
set-option -g prefix C-a        # Set new prefix to Ctrl-a
bind-key C-a send-prefix        # Allow sending literal Ctrl-a to applications

# Terminal color support - ensures proper colors in vim and other applications
set -g default-terminal "tmux-256color"                    # Enable 256 color support
#set -ga terminal-overrides ",xterm-256color:Tc"           # Uncomment for true color (24-bit) if needed

# Terminal fixes for vim/neovim compatibility
set -ga terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'    # Cursor shape support (insert vs normal mode)
set -ga terminal-overrides ',xterm*:XT'                     # Enable proper mouse and scrolling

# Timing optimizations for responsive feel
set -s escape-time 10           # Small delay for escape sequences (was 0, increased for stability)
set -sg repeat-time 600         # Key repeat timeout for resize commands (ms)

# Set scrollback buffer to very large number
set-option -g history-limit 1000000

# Start windows and panes at 1, not 0
set -g base-index 1
setw -g pane-base-index 1

# Rename windows automatically
set-option -g allow-rename on
set-option -g automatic-rename on

# Enable focus events (important for vim)
set -g focus-events on

# Set terminal title
set -g set-titles on
set -g set-titles-string '#S ‚óè #I #W'

# Show pane numbers longer
set -g display-panes-time 2000

# Renumber windows when one is closed
set -g renumber-windows on

# Enable aggressive resize for better VSCode terminal integration
setw -g aggressive-resize on

# ============================================
# STATUS BAR CUSTOMIZATION
# ============================================

# Status bar colors and format
set -g status-interval 1
set -g status-left-length 40
set -g status-right-length 60

set -g status-left '#[fg=white](#S) #[default] '
set -g status-right '#[fg=green]#(free -h | sed "s/Gi//g" |awk "NR==2 {print \$3\"/\"\$2\" (\"\$6\")\"}")|#[fg=default]#[fg=yellow]#(cut -d " " -f 1-3 /proc/loadavg)#[default]|#[fg=white]%H:%M:%S#[default]'

# ============================================
# COLORS
# ============================================

set -g window-style 'fg=colour247'
set -g window-active-style 'fg=default'

set -g status-style 'bg=default'
set -g message-style 'bg=default'

# Highlight active window
setw -g window-status-current-style fg=black,bg=white

# Pane border colors
set -g pane-border-style fg=colour235
set -g pane-active-border-style fg=colour215

# Dim inactive panes (text only, preserves transparency)
set -g window-style 'fg=colour244'
set -g window-active-style 'fg=colour255'

# Toggle status bar with prefix + b
bind b set status on \; run-shell "sleep 3 ; tmux set status off"

# Prefix + B (shift+b) = Toggle status bar permanently  
bind B \
    if -F '#{s/off//:status}' \
        'set status off' \
        'set status on'

# Start with status hidden
set -g status off

# ============================================
# SESSION MANAGEMENT
# ============================================

# Create new session with current directory
bind C-c new-session -c "#{pane_current_path}"

# Session navigation
bind -n M-s choose-session

# ============================================
# MOUSE CONFIGURATION (SIMPLIFIED FOR VIM)
# ============================================

# Enable mouse support
set -g mouse on

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Don't override mouse behavior - let applications handle it
# This is the simplest approach that works best with vim

# Toggle mouse mode
bind m set -g mouse on \; display 'Mouse: ON'
bind M set -g mouse off \; display 'Mouse: OFF'

# ============================================
# TERMINATOR-STYLE KEYBINDINGS
# ============================================

# Splitting panes (prefix + key since tmux can't use Ctrl-Shift)
bind-key e split-window -h -c "#{pane_current_path}"  # Vertical split
bind-key o split-window -v -c "#{pane_current_path}"  # Horizontal split

# Navigate panes with Alt+arrows (no prefix needed) - Terminator-style navigation
bind -n M-Left select-pane -L   # Alt+Left = move to left pane
bind -n M-Right select-pane -R  # Alt+Right = move to right pane
bind -n M-Up select-pane -U     # Alt+Up = move to upper pane
bind -n M-Down select-pane -D   # Alt+Down = move to lower pane

# Navigate panes with prefix+hjkl (vim-style) - works in VSCode
bind h select-pane -L    # prefix+h = move to left pane
bind j select-pane -D    # prefix+j = move to down pane  
bind k select-pane -U    # prefix+k = move to up pane
bind l select-pane -R    # prefix+l = move to right pane

# Resize panes with Ctrl+Alt+arrows (no prefix needed) - 2 cell increments
bind -n C-M-Left resize-pane -L 2   # Ctrl+Alt+Left = shrink horizontally
bind -n C-M-Right resize-pane -R 2  # Ctrl+Alt+Right = grow horizontally
bind -n C-M-Up resize-pane -U 2     # Ctrl+Alt+Up = shrink vertically
bind -n C-M-Down resize-pane -D 2   # Ctrl+Alt+Down = grow vertically

# Fine-grained resize (with prefix)
bind -r H resize-pane -L 1
bind -r J resize-pane -D 1
bind -r K resize-pane -U 1
bind -r L resize-pane -R 1

# ============================================
# PANE MANAGEMENT
# ============================================

# Smart pane switching with awareness of Vim splits (AUDIT CHANGE: uncommented for seamless vim/tmux navigation)
# This detects if vim is running and passes navigation keys to vim, otherwise moves tmux panes
# Requires vim-tmux-navigator plugin: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
| grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind -n M-h if-shell "$is_vim" "send-keys M-h"  "select-pane -L"
bind -n M-j if-shell "$is_vim" "send-keys M-j"  "select-pane -D"
bind -n M-k if-shell "$is_vim" "send-keys M-k"  "select-pane -U"
bind -n M-l if-shell "$is_vim" "send-keys M-l"  "select-pane -R"

# Quick pane switching by number (no prefix needed)
bind -n M-1 select-pane -t 1    # Alt+1 = jump to pane 1
bind -n M-2 select-pane -t 2    # Alt+2 = jump to pane 2
bind -n M-3 select-pane -t 3    # Alt+3 = jump to pane 3
bind -n M-4 select-pane -t 4    # Alt+4 = jump to pane 4

# ============================================
# COPY MODE AND SCROLLING
# ============================================

# Enter copy mode with prefix + [
# (Default tmux binding, no special configuration needed)

# Scrolling shortcuts (no prefix needed) 
# Use Ctrl+navigation keys (these work by default)
# Default tmux behavior:
# Ctrl+PageUp/PageDown - enter copy mode and scroll
# These will stay in copy mode until you press Escape

# Add Shift+navigation for tmux scrolling (stay in position, just exit copy mode)
bind -n S-Home copy-mode \; send-keys -X history-top
bind -n S-End copy-mode \; send-keys -X history-bottom
bind -n S-PageUp copy-mode \; send-keys -X page-up
bind -n S-PageDown copy-mode \; send-keys -X page-down

# Alternative: Bind the actual escape sequences alacritty sends
# But tmux doesn't support binding raw escape sequences directly

# In copy mode: continue scrolling with Shift keys (also exit copy mode)
bind -T copy-mode-vi S-Home send-keys -X history-top \; send-keys -X cancel
bind -T copy-mode-vi S-End send-keys -X history-bottom \; send-keys -X cancel
bind -T copy-mode-vi S-PageUp send-keys -X page-up \; send-keys -X cancel
bind -T copy-mode-vi S-PageDown send-keys -X page-down \; send-keys -X cancel

# Regular Home/End keys in copy mode (move to beginning/end of line)
bind -T copy-mode-vi Home send-keys -X start-of-line
bind -T copy-mode-vi End send-keys -X end-of-line

# Easy ways to exit copy mode
bind -T copy-mode-vi Escape send-keys -X cancel
bind -T copy-mode-vi q send-keys -X cancel
bind -T copy-mode-vi Space send-keys -X cancel

# Move jump forward/backward to avoid accidental triggers
unbind -T copy-mode-vi f
unbind -T copy-mode-vi F
bind -T copy-mode-vi / command-prompt -p "Jump to:" "send-keys -X jump-forward '%%'"
bind -T copy-mode-vi ? command-prompt -p "Jump back to:" "send-keys -X jump-backward '%%'"

# Clear screen with Ctrl-L (works like normal terminal) 
# Alacritty now sends proper \x0c character
bind -n C-l send-keys C-l

# Clear scrollback buffer with prefix + C-k
bind C-k clear-history

# ============================================
# CLIPBOARD INTEGRATION
# ============================================

# Enable clipboard integration (AUDIT CHANGE: was 'off' - conflicted with vim's clipboard=unnamedplus)
# This allows tmux to integrate with system clipboard for vim and other apps
set -g set-clipboard on

unbind -T copy-mode-vi MouseDragEnd1Pane
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X stop-selection

# Mouse selection behaviors
# Double-click to select word
bind -T copy-mode-vi DoubleClick1Pane send-keys -X select-word \; send-keys -X stop-selection
bind -n DoubleClick1Pane copy-mode \; send-keys -X select-word \; send-keys -X stop-selection

# Triple-click to select line  
bind -T copy-mode-vi TripleClick1Pane send-keys -X select-line \; send-keys -X stop-selection
bind -n TripleClick1Pane copy-mode \; send-keys -X select-line \; send-keys -X stop-selection

# Click without drag clears selection
bind -T copy-mode-vi MouseDown1Pane send-keys -X clear-selection

# Now selection stays active! Map keys to copy:
bind -T copy-mode-vi C-c send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"
bind -T copy-mode-vi C-S-c send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"

# Alternative: use 'y' to copy (vim-style) - with error handling
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard 2>/dev/null || xclip -in -selection primary"

# Right-click to cancel selection (like Terminator)
bind -T copy-mode-vi MouseDown3Pane send-keys -X cancel

# Paste from system clipboard (override default tmux paste)
bind ] run-shell "xclip -out -selection clipboard | tmux load-buffer - && tmux paste-buffer"
#
# Copy to system clipboard in copy mode
#bind -T copy-mode-vi v send-keys -X begin-selection
#bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'
#bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'
#
## Mouse selection copies to clipboard
#bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "xclip -in -selection clipboard"

# ============================================
# QUALITY OF LIFE IMPROVEMENTS
# ============================================

# Reload config with prefix + r
bind r source-file ~/.tmux.conf \; display-message "Config reloaded!"

# Synchronize panes (type in all panes at once) with prefix + s
#bind s setw synchronize-panes

# Quick pane cycling with prefix + Ctrl-a
bind C-a select-pane -t :.+

# Visual notification of activity in other windows
setw -g monitor-activity on
set -g visual-activity on

# ============================================
# ADDITIONAL VIM-FRIENDLY SETTINGS
# ============================================

# Ensure vim gets proper key sequences
set -g xterm-keys on

set-option -g extended-keys always  

# Make sure vim's background erase works properly
set -ga terminal-overrides ',xterm*:bce'
